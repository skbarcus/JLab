#include <TH2F.h>
#include <TChain.h>
#include <TCanvas.h>
#include <vector>
#include <iostream>
#include <TSystem.h>
#include "hcal.h"
#include <vector>
#include <TStopwatch.h>
#include <TDatime.h>
using namespace std;

Double_t entry;
Int_t gCurrentEntry = 0;
Int_t DISP_MIN_SAMPLE = 0;
Int_t DISP_MAX_SAMPLE = 30;
Int_t update_pedestals_file = 1;          //0-> Doesn't update the Pedestals.txt file with new values. 1-> Updates the Pedestals.txt file with the newly calculated values.
Int_t limit_evts = 1;                     //0-> analyze all events. 1-> only analyze events up until max_evts.
Int_t loop_max = 0;                       //Dummy variable set equal to max_evts or nevt for the loop.
Int_t max_evts = 20000;                   //Maximum number of events to analyze if limit_evts = 1.
const Int_t DISP_FADC_SAMPLES = (DISP_MAX_SAMPLE-DISP_MIN_SAMPLE);
Int_t bins_int = 5000, bins_avg = 300, min_int = 4000, max_int = 9000, min_avg = 100, max_avg = 400;
Int_t r,c,n,idx;
Int_t nevt;
const Int_t kNrows = 24;
const Int_t kNcols = 12;
const Int_t channels = kNrows * kNcols;
Double_t ped_int_std_dev[channels] = {};
Double_t ped_int_mean[channels] = {};
Double_t ped_avg_std_dev[channels] = {};
Double_t ped_avg_mean[channels] = {};
TChain *T = 0;
std::string user_input;

TH1F *histos[kNrows][kNcols];

TH1F* MakeHisto(Int_t row, Int_t col, Int_t bins)
{
  TH1F *h = new TH1F(TString::Format("h%02d%02d",row,col),
		     TString::Format("%d-%d",row+1,col+1),bins,DISP_MIN_SAMPLE,DISP_MAX_SAMPLE);
  h->SetStats(0);
  h->SetLineWidth(2);
  return h;
}

//Create Gaussian to fit the timing resolution.
Double_t fit_gaus(Double_t *X,Double_t *par) 
{
  Double_t fitval = par[0]*TMath::Exp(-0.5*pow(((X[0]-par[1])/par[2]),2));
  return fitval;
}

void Pedestals_Updated(Int_t run = 501)
//Int_t Test_Display(Int_t run = 290)
{
  //Define a new stopwatch.
  TStopwatch *st=new TStopwatch();
  st->Start(kTRUE);

  //Create a date object.
  TDatime time;

  gROOT->SetBatch(kTRUE);//Always run in batch mode to be sure tons of plots don's pop up.

  //Open file to write output to.
  std::ofstream output1 (Form("./Pedestals_Updated.txt"), std::ofstream::out);
  std::ofstream output2 (Form("./Pedestals/Pedestals_Updated_%d.txt",run), std::ofstream::out);
  if(update_pedestals_file == 1)
    {
      output1<<"These pedestals were generated from run "<<run<<"."<<endl;
      output1<<"They were generated at "<<time.GetHour()<<":"<<time.GetMinute()<<" on "<<time.GetMonth()<<"/"<<time.GetDay()<<"/"<<time.GetYear()<<"."<<endl;
      output1<<"Module"<<"  Ped Int"<<"  Ped Int Std Dev"<<"  Ped Avg"<<"  Ped Avg Std Dev"<<endl;

      output2<<"These pedestals were generated from run "<<run<<"."<<endl;
      output2<<"They were generated at "<<time.GetHour()<<":"<<time.GetMinute()<<" on "<<time.GetMonth()<<"/"<<time.GetDay()<<"/"<<time.GetYear()<<"."<<endl;
      output2<<"Module"<<"  Ped Int"<<"  Ped Int Std Dev"<<"  Ped Avg"<<"  Ped Avg Std Dev"<<endl;
    }

  if(!T) 
    { 
      T = new TChain("T");
      //T->Add(TString::Format("rootfiles/fadc_f1tdc_%d.root",run));//325
 
      //============  Reading the Rootfile =======================//
      
      const TString rootfilePath = "/home/daq/test_fadc/rootfiles/";
      std::ostringstream str;
      str << rootfilePath<<"fadc_f1tdc_"<<run;
      TString basename = str.str().c_str();
      TString rootfile = basename + ".root";
      cout<<basename<<endl;
      //TChain* T;
      //T = new TChain("T");
      
      Long_t split=0;
      char* file = 0;
      
      //====adding splits rootfiles =======================//
      
      Long_t u=0;
      while ( !gSystem->AccessPathName(rootfile.Data()) ) 
	{
	  T->Add(rootfile.Data());
	  cout << "ROOT file " << rootfile << " added to TChain." << endl;
	  u++;
	  rootfile = basename + "_" + u + ".root";
	}
      
      if(!T->GetEntries())
	{
	  cerr<< "No root file was found" << endl;
	  return;
	}
      //==finish adding splits rootfiles=====================//

      T->SetBranchStatus("*",0);
      T->SetBranchStatus("sbs.hcal.*",1);
      T->SetBranchAddress("sbs.hcal.nsamps",hcalt::nsamps);       //Number of samples for given row-col
      T->SetBranchAddress("sbs.hcal.a",hcalt::a);                 //Raw ADC amplitudes
      T->SetBranchAddress("sbs.hcal.tdc",hcalt::tdc);             //Raw TDC value
      //T->SetBranchAddress("sbs.hcal.ledbit",&hcalt::ledbit);
      //T->SetBranchAddress("sbs.hcal.ledcount",&hcalt::ledcount);
      T->SetBranchAddress("sbs.hcal.samps",hcalt::samps);         //RAW ADC samples
      T->SetBranchAddress("sbs.hcal.samps_idx",hcalt::samps_idx); //Index in samples vector for given row-col module 
      T->SetBranchAddress("sbs.hcal.row",hcalt::row);             //Row for block in data vectors
      T->SetBranchAddress("sbs.hcal.col",hcalt::col);             //Col for block in data vectors
      T->SetBranchStatus("Ndata.sbs.hcal.row",1);
      T->SetBranchAddress("Ndata.sbs.hcal.row",&hcalt::ndata);    //???
      std::cerr << "Opened up tree with nentries=" << T->GetEntries() << std::endl;
      }

  for(Int_t r = 0; r < kNrows; r++) 
    {
      for(Int_t c = 0; c < kNcols; c++) 
	{
	  histos[r][c] = MakeHisto(r,c,DISP_FADC_SAMPLES);
	}
    }

  nevt = T->GetEntries();
  Double_t adc[kNrows][kNcols];
  Double_t tdc[kNrows][kNcols];
  Int_t no_tdc[channels] = {};
  Int_t yes_tdc[channels] = {};

  //Histograms for showing the fADC integrals for each pedestal event (i.e. not TDC hit).
  TH1F **hped_int = new TH1F*[channels];
  for(Int_t i = 0; i<channels; i++)
    {
      hped_int[i] = new TH1F(Form("hped_int%d",i),Form("fADC Pedestal Integrals for Module %d",i),bins_int,min_int,max_int);
    }

  //Histograms for showing the fADC integrals for each pedestal event (i.e. not TDC hit).
  TH1F **hped_avg = new TH1F*[channels];
  for(Int_t i = 0; i<channels; i++)
    {
      hped_avg[i] = new TH1F(Form("hped_avg%d",i),Form("Average RAU fADC Pedestals for Module %d",i),bins_avg,min_avg,max_avg);
    }

  gStyle->SetOptStat(0);
  TH1F *hped_int_mean_pmt = new TH1F(Form("hped_int_mean_pmt"),Form("fADC Pedestal Integrals per PMT Module"),channels,0,channels);
  TH1F *hped_avg_mean_pmt = new TH1F(Form("hped_avg_mean_pmt"),Form("Average RAU fADC Pedestals per PMT Module"),channels,0,channels);
  TH1F *hped_int_std_dev_pmt = new TH1F(Form("hped_int_std_dev_pmt"),Form("fADC Pedestal Integral Standard Deviations per PMT Module"),channels,0,channels);
  TH1F *hped_avg_std_dev_pmt = new TH1F(Form("hped_avg_std_dev_pmt"),Form("Average RAU fADC Pedestal Standard Deviations per PMT Module"),channels,0,channels);

  //Loop over all events.
  if(limit_evts==1)
    {
      loop_max = max_evts;
    }
  else
    {
      loop_max = nevt;
    }
  for(Int_t i=0; i<loop_max ;i++)
    {
      T->GetEntry(gCurrentEntry);
      //T->GetEntry(11);
      //T->GetEntry(665);
      
      //Set arrays to zero;
      for(r  = 0; r < kNrows; r++) 
	{
	  for(c  = 0; c < kNcols; c++) 
	    {
	      adc[r][c] = 0.0;
	      tdc[r][c] = 0.0;
	    }
	}

      //Loop over all channels and fill the arrays.
      for(Int_t j=0; j<hcalt::ndata; j++)
	{
	  r = hcalt::row[j]-1;
	  c = hcalt::col[j]-1;
	  idx = hcalt::samps_idx[j];
	  n = hcalt::nsamps[j];
	  adc[r][c] = hcalt::a[j];
	  tdc[r][c] = hcalt::tdc[j];
	  
	  //Find the pedestal values when the TDC didn't fire (should be no fADC signal either). 
	  if(tdc[r][c] == 0)
	    {
	      no_tdc[j] = no_tdc[j]+1;
	      for(Int_t s = DISP_MIN_SAMPLE; s < DISP_MAX_SAMPLE && s < n; s++) 
		{
		  histos[r][c]->SetBinContent(s+1-DISP_MIN_SAMPLE,hcalt::samps[idx+s]);
		}
	      //Fill the histogram of fADC pedestal event integrals.
	      hped_int[j]->Fill(adc[r][c]);
	      hped_avg[j]->Fill(adc[r][c]/n);
	    }
	}
      if(i%5000==0)
	{
	  cout<<i<<" events processed. "<<((double)i/(double)loop_max)*100.<<" % complete."<<endl;
	}

      gCurrentEntry++;
    }

  //Open file to store results histograms etc.
  TFile* file;
  if(update_pedestals_file == 1)
    {
      file = new TFile(Form("/home/daq/test_fadc/Pedestals/Pedestals_Updated_Run%d.root",run),"RECREATE");
    }

  gStyle->SetOptFit(1111);

  TF1 **func_gaus_fit_int = new TF1*[channels];
  TF1 **func_gaus_fit_avg = new TF1*[channels];

  for(Int_t i = 0; i<hcalt::ndata; i++)
    {
      //Fit a Gaussian to the integrated fADC pedestals.
      func_gaus_fit_int[i] = new TF1("func_gaus_fit_int",fit_gaus, min_int, max_int, 3);
      func_gaus_fit_int[i]->SetLineColor(2);
      func_gaus_fit_int[i]->SetNpx(1000);
      
      func_gaus_fit_int[i]->SetParameter(0,hped_int[i]->GetBinContent(hped_int[i]->GetMaximumBin()));;
      //func_gaus_fit_int[i]->SetParLimits(0,0,10000);
      func_gaus_fit_int[i]->SetParameter(1,hped_int[i]->GetMean());
      //func_gaus_fit_int[i]->SetParLimits(1,0,8000);
      func_gaus_fit_int[i]->SetParameter(2,hped_int[i]->GetStdDev());
      hped_int[i]->Fit(func_gaus_fit_int[i],"rq");

      //Fit a Gaussian to the average RAU fADC pedestals.
      func_gaus_fit_avg[i] = new TF1("func_gaus_fit_avg",fit_gaus, min_avg, max_avg, 3);
      func_gaus_fit_avg[i]->SetLineColor(2);
      func_gaus_fit_avg[i]->SetNpx(1000);
      
      func_gaus_fit_avg[i]->SetParameter(0,hped_avg[i]->GetBinContent(hped_avg[i]->GetMaximumBin()));;
      //func_gaus_fit_avg[i]->SetParLimits(0,0,10000);
      func_gaus_fit_avg[i]->SetParameter(1,hped_avg[i]->GetMean());
      //func_gaus_fit_avg[i]->SetParLimits(1,0,8000);
      func_gaus_fit_avg[i]->SetParameter(2,hped_avg[i]->GetStdDev());
      hped_avg[i]->Fit(func_gaus_fit_avg[i],"rq");

      ped_int_mean[i] = func_gaus_fit_int[i]->GetParameter(1);
      ped_int_std_dev[i] = func_gaus_fit_int[i]->GetParameter(2);

      ped_avg_mean[i] = func_gaus_fit_avg[i]->GetParameter(1);
      ped_avg_std_dev[i] = func_gaus_fit_avg[i]->GetParameter(2);

      if(update_pedestals_file == 1)
	{
	  hped_int[i]->Write();
	  hped_avg[i]->Write();
	}
    }

  gStyle->SetOptStat(0);
  for(Int_t i = 0; i<hcalt::ndata; i++)
    {
      hped_int_mean_pmt->SetBinContent(i+1,ped_int_mean[i]);
      hped_avg_mean_pmt->SetBinContent(i+1,ped_avg_mean[i]);
      hped_int_std_dev_pmt->SetBinContent(i+1,ped_int_std_dev[i]);
      hped_avg_std_dev_pmt->SetBinContent(i+1,ped_avg_std_dev[i]);
      if(update_pedestals_file == 1)
	{
	  output1<<Form("%d   %.2f   %.2f   %.2f   %.2f",i,ped_int_mean[i],ped_int_std_dev[i],ped_avg_mean[i],ped_avg_std_dev[i])<<endl;
	  output2<<Form("%d   %.2f   %.2f   %.2f   %.2f",i,ped_int_mean[i],ped_int_std_dev[i],ped_avg_mean[i],ped_avg_std_dev[i])<<endl;
	}
    }

  if(update_pedestals_file == 1)
    {
      hped_int_mean_pmt->Write();
      hped_avg_mean_pmt->Write();
      hped_int_std_dev_pmt->Write();
      hped_avg_std_dev_pmt->Write();
    }

  if(update_pedestals_file == 1)
    {
      output1.close();
      output2.close();
      file->Close();
    }

  //Stop and print out stopwatch information.
  st->Stop();
  cout<<"CPU time = "<<st->CpuTime()<<" s = "<<st->CpuTime()/60.<<" min   Real time = "<<st->RealTime()<<" s = "<<st->RealTime()/60.<<" min"<<endl;
}
