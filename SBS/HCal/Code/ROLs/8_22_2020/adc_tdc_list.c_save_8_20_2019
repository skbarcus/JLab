/*************************************************************************
 *
 *  fadc_list.c - Library of routines for readout and buffering of 
 *                events using a JLAB Trigger Interface and
 *                Distribution Module (TID) AND one or more FADC250 
 *                with a Linux VME controller.
 *
 */
/* Decide which components we want to enable. Comment out to disable */
#define ENABLE_F1 /* F1TDCs */
#define ENABLE_FADC /* FADC 250s */ 
/* #define ENABLE_HCAL_PULSER */ /* HCAL Pulser system */


/* Is this a VXS crate or VME64x */
/* #define IS_VXS */

/* Event Buffer definitions */
#define MAX_EVENT_POOL     100
#define MAX_EVENT_LENGTH   (75000 << 2)      /* Size in Bytes */

/* Define Interrupt source and address */
#define TI_MASTER   /* Master accepts triggers and distributes them, if needed */
#define TI_READOUT TI_READOUT_EXT_POLL  /* Poll for available data, external triggers */
#define TI_ADDR    (21<<19)              /* GEO slot 21 */

/* Decide which readouts we want enabled */
/* #define READOUT_TI_DATA */ /* Readout the TI */
#define READOUT_FADC   /* Readout FADCs */
#define READOUT_F1      /* Readout F1TDCs */
#define READOUT_TEST    /* Readout Test Data */



/* Comment out the following to re-enable the MultiBlock readout
   On our (July 2019) test VME64x crate we don't have the necessary jumpers
   installed to do multiblock readout.
 */
#define DISABLE_MULTIBLOCK_READOUT


#ifdef TI_SLAVE
int tsCrate=0;
#else
#ifdef TI_MASTER
int tsCrate=1;
#endif
#endif


/* Specify the banks that will contain the data here */
#define BANK_FADC        3
#define BANK_TI          4
#define BANK_TEST        5
#define BANK_HCAL_PULSER 6
#define BANK_F1          7

#define FIBER_LATENCY_OFFSET 0x40  /* measured longest fiber length */

#include "dmaBankTools.h"
#include "tiprimary_list.c" /* source required for CODA */
#ifdef ENABLE_F1
#include "f1tdcLib.h"       /* library of f1tdc routines */
#endif
#ifdef ENABLE_FADC
#include "fadcLib.h"         /* Header for FADC250 library */
#include "sdLib.h"  
#endif
#include "remexLib.h"
#ifdef ENABLE_HCAL_PULSER
#include "hcalLib.h"
#endif


#ifdef ENABLE_FADC
/* FADC250 Global Definitions */
#define FADC_START_SLOT       19    /* First ADC SLOT */
int faMode=1;
#define FADC_WINDOW_LAT       200  /* Trigger Window Latency */
#define FADC_WINDOW_WIDTH     200  /* Trigger Window Width */
/* New values for LED pulser 2019-06-01 */
#define FADC_WINDOW_LAT       180  /* Trigger Window Latency */
#define FADC_WINDOW_WIDTH      80  /* Trigger Window Width */
/* 2019-06-18 */
//#define FADC_WINDOW_LAT       330  /* Trigger Window Latency */
//#define FADC_WINDOW_WIDTH      80  /* Trigger Window Width */

#define FADC_DAC_LEVEL       3300 /* Internal DAC Level */
#define FADC_THRESHOLD       0x50 /* Threshold for data readout */
#define FADC_THRESHOLD       0x00 /* Threshold for data readout, i.e. no threshold */

#define FADC_SD_ADDR         0xEA00 /* Address of the FADC SD */

/* Change latency for cosmic tests (Cornejo 20181207) */
#define FADC_WINDOW_LAT       225   /* Trigger Window Latency */
#define FADC_WINDOW_WIDTH     200   /* Trigger Window Width */

/* CTP */
#define CTP_THRESHOLD    4000

/* FADC Specific definitions */
unsigned int fadcSlotMask   = 0;    /* bit=slot (starting from 0) */
extern   int fadcA32Base;           /* This will need to be reset from it's default
                                     * so that it does not overlap with the TID */
extern   int nfadc;                 /* Number of FADC250s verified with the library */
extern   int fadcID[FA_MAX_BOARDS]; /* Array of slot numbers, discovered by the library */
extern   int fadcAddrList[FA_MAX_BOARDS]; /* Array of slot numbers, discovered by the library */
int NFADC = 2;                      /* The Maximum number of tries the library will
                                     * use before giving up finding FADC250s */
int FA_SLOT;                        /* We'll use this over and over again to provide
				     * us access to the current FADC slot number */ 
#endif

#ifdef ENABLE_F1
/* F1TDC Specifics */
extern int f1tdcA32Base;
int F1_SLOT;
extern int f1ID[F1_MAX_BOARDS];
#define F1_ADDR  8<<19
#define F1_SD_ADDR 0xDD0
int NF1TDC = 2;
#endif


/* for the calculation of maximum data words in the block transfer */
unsigned int MAXFADCWORDS = 0;
unsigned int MAXTIWORDS   = 0;
unsigned int MAXF1WORDS   = 0;

/* Default Global Blocklevel (Number of events per block) */
unsigned int BLOCKLEVEL=1;
#define BUFFERLEVEL 1


#ifdef ENABLE_HCAL_PULSER
#define HCAL_LED_NLIST 6 /* Number of steps in sequence */
unsigned int HCAL_LED_COUNT = 0;
unsigned int HCAL_LED_MAX_COUNT[50];
unsigned int HCAL_LED_LIST[50];
unsigned int HCAL_LED_LIST_ITER=0;
#endif

/* function prototype */
void rocTrigger(int arg);


/****************************************
 *  DOWNLOAD
 ****************************************/
void
rocDownload()
{
  int islot;

  remexSetCmsgServer("sbs1");
  remexSetRedirect(1);
  remexInit(NULL,1);


  /* Setup Address and data modes for DMA transfers
   *   
   *  vmeDmaConfig(addrType, dataType, sstMode);
   *
   *  addrType = 0 (A16)    1 (A24)    2 (A32)
   *  dataType = 0 (D16)    1 (D32)    2 (BLK32) 3 (MBLK) 4 (2eVME) 5 (2eSST)
   *  sstMode  = 0 (SST160) 1 (SST267) 2 (SST320)
   */
#ifndef DISABLE_MULTIBLOCK_READOUT
  printf("Setting up  vmeDmaConfig(2,5,1)\n");
  vmeDmaConfig(2,5,1);  /* By default, only for use with FADC */
#else
  printf("Setting up  vmeDmaConfig(2,3,0)\n");
  vmeDmaConfig(2,3,0); /* Since F1's don't like the mode above */
#endif

  /***************************************
   * TI Setup 
   ***************************************/
#ifndef READOUT_TI_DATA
  /* Disable data readout */
  tiDisableDataReadout();
  /* Disable A32... where that data would have been stored on the TI */
  tiDisableA32();
#endif

  /* Set crate ID */
  tiSetCrateID(0x16); /* ROC 22 */

#ifdef TI_MASTER
  tiSetTriggerSource(TI_TRIGGER_TSINPUTS); 

  /* Set needed TS input bits */
  tiEnableTSInput( TI_TSINPUT_1 ); 

  /* Load the trigger table that associates 
     pins 21/22 | 23/24 | 25/26 : trigger1
     pins 29/30 | 31/32 | 33/34 : trigger2
  */
  tiLoadTriggerTable(0);

  tiSetTriggerHoldoff(1,10,0);
  tiSetTriggerHoldoff(2,10,0);

  /* Set the sync delay width to 0x40*32 = 2.048us */
  /* Not sure what it does, comment out for now and see if things work */
  tiSetSyncDelayWidth(0x54, 0x40, 1);

  /* Set the busy source to non-default value (no Switch Slot B busy) */
/*   tiSetBusySource(TI_BUSY_LOOPBACK,1); */
/*   tiSetBusySource(0,1); */

  tiSetFiberDelay(0x40,FIBER_LATENCY_OFFSET);

  /* Set number of events per block (if Master, will be broadcasted at end of Prestart)*/
  tiSetBlockLevel(BLOCKLEVEL);
#endif

  tiSetEventFormat(1);

  tiSetBlockBufferLevel(BUFFERLEVEL);

  tiStatus(0);


#ifdef ENABLE_FADC
  /***************************************
   * FADC Setup 
   ***************************************/
  /* Here, we assume that the addresses of each board were set according to their
   * geographical address (slot number):
   * Slot  3:  (3<<19) = 0x180000
   * Slot  4:  (4<<19) = 0x200000
   * ...
   * Slot 20: (20<<19) = 0xA00000
   */

  /*  NFADC = (16+2-4)*0+2;*/   /* 16 slots + 2 (for the switch slots) */
  FA_SLOT=0;
  for(islot = 0; islot < NFADC; islot++) {
    FA_SLOT=islot+FADC_START_SLOT;
#ifdef IS_VXS
    if(>10) {
      FA_SLOT += 2;
    }
#endif
    fadcAddrList[islot] = (FA_SLOT)<<19;
  }
  fadcA32Base=0x09000000;

  /* Setup the iFlag.. flags for FADC initialization */
  int iFlag=0;
  /* Sync Source */
  iFlag |= (1<<0);
  /* Trigger Source */
#ifdef IS_VXS
  iFlag |= (1<<2);    /* VXS */
#else
  iFlag |= (1<<1);    /* VME */
#endif
  /* Clock Source */
  iFlag |= (0<<5);    /* Self */
  /* iFlag |= FA_INIT_SKIP_FIRMWARE_CHECK; */   /* no check of FADC firmware for HPS version */
  iFlag |= FA_INIT_USE_ADDRLIST; /* Use our address list */
  vmeSetQuietFlag(1); /* skip the errors associated with BUS Errors */
#ifndef IS_VXS
  iFlag |= FADC_SD_ADDR;
  iFlag |= FA_SOURCE_SDC;
#endif

  faInit((unsigned int)(FADC_START_SLOT<<19),(1<<19),NFADC,iFlag);

  vmeSetQuietFlag(0); /* Turn the error statements back on */
  /* Calculate the maximum number of words per block transfer (assuming Pulse mode)
   *   MAX = NFADC * BLOCKLEVEL * (EvHeader + TrigTime*2 + Pulse*2*chan) 
   *         + 2*32 (words for byte alignment) 
   */
  if(faMode = 1) /* Raw window Mode */
    //MAXFADCWORDS = NFADC * BLOCKLEVEL * (1+2+FADC_WINDOW_WIDTH*16) + 3;
    MAXFADCWORDS = NFADC * BLOCKLEVEL * (1+1+2+(FADC_WINDOW_WIDTH*16)) + 3;
  else /* Pulse mode */
    MAXFADCWORDS = NFADC * BLOCKLEVEL * (1+2+32) + 2*32;
  /* Maximum TID words is easier to calculate, but we can be conservative, since
   * it's first in the readout
   */
/*   MAXTIDWORDS = 8+(3*BLOCKLEVEL); */
  
  printf("**************************************************\n");
  printf("* Calculated MAX FADC words per block = %d\n",MAXFADCWORDS);
/*   printf("* Calculated MAX TID  words per block = %d\n",MAXTIDWORDS); */
  printf("**************************************************\n");
  /* Check these numbers, compared to our buffer size.. */
/*   if( (MAXFADCWORDS+MAXTIDWORDS)*4 > MAX_EVENT_LENGTH ) */
/*     { */
/*       printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"); */
/*       printf(" WARNING.  Event buffer size is smaller than the expected data size\n"); */
/*       printf("     Increase the size of MAX_EVENT_LENGTH and recompile!\n"); */
/*       printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"); */
/*     } */

#ifndef DISABLE_MULTIBLOCK_READOUT
  if(NFADC>1)
    faEnableMultiBlock(1);
#else
  faDisableMultiBlock();
#endif


  /* Additional Configuration for each module */
  fadcSlotMask=0;
  for(islot=0;islot<NFADC;islot++) 
    {
      FA_SLOT = fadcID[islot];      /* Grab the current module's slot number */
      printf("This is the slot number I got: FA_SLOT = %d\n",FA_SLOT);
      fadcSlotMask |= (1<<FA_SLOT); /* Add it to the mask */

      /* Set the internal DAC level */
      faSetDAC(FA_SLOT,FADC_DAC_LEVEL,0);
      /* Set the threshold for data readout */
      faSetThreshold(FA_SLOT,FADC_THRESHOLD,0);
      faPrintThreshold(FA_SLOT);
      /*  Setup option 1 processing - RAW Window Data     <-- */
      /*        option 2            - RAW Pulse Data */
      /*        option 3            - Integral Pulse Data */
      /*  Setup 200 nsec latency (PL  = 50)  */
      /*  Setup  80 nsec Window  (PTW = 20) */
      /*  Setup Pulse widths of 36ns (NSB(3)+NSA(6) = 9)  */
      /*  Setup up to 1 pulse processed */
      /*  Setup for both ADC banks(0 - all channels 0-15) */
      /* Integral Pulse Data */
      faSetProcMode(FA_SLOT,faMode,FADC_WINDOW_LAT,FADC_WINDOW_WIDTH,3,6,1,0);
	
      /* Bus errors to terminate block transfers (preferred) */
      faEnableBusError(FA_SLOT);
      /* Set the Block level */
      faSetBlockLevel(FA_SLOT,BLOCKLEVEL);

      /* Set the individual channel pedestals for the data that is sent
       * to the CTP
       */
      int ichan;
      for(ichan=0; ichan<16; ichan++)
	{
	  faSetChannelPedestal(FA_SLOT,ichan,0);
	}

      faStatus(FA_SLOT,0);

   }

#ifdef IS_VXS
  /***************************************
   *   SD SETUP
   ***************************************/
  sdInit(0);   /* Initialize the SD library */
  sdSetActiveVmeSlots(fadcSlotMask); /* Use the fadcSlotMask to configure the SD */
  sdStatus();
#endif

#endif /* End: ENABLE_FADC */

  
#ifdef ENABLE_HCAL_PULSER
  printf("Will enable HCAL PULSER!!!\n\n\n");
  hcalClkIn(6); /* Turn on LED 6 at the end */
#endif
  printf("rocDownload: User Download Executed\n");

}

/****************************************
 *  PRESTART
 ****************************************/
void
rocPrestart()
{
  unsigned short iflag;
  int stat,islot;

/*   tiSetup(21); */

// 03Apr2013, moved this into ctpInit()
/*   ctpFiberReset(); */

#ifdef ENABLE_FADC
  /* FADC Perform some resets, status */
  for(islot=0;islot<NFADC;islot++) 
    {
      FA_SLOT = fadcID[islot];
#ifdef IS_VXS
      faSetClockSource(FA_SLOT,2); /* Set Clock source to VXS */
#else
      faSetClockSource(FA_SLOT,1); /* Front Panel for VME64x */
#endif
      /*  faClear(FA_SLOT); */
      faSoftReset(FA_SLOT,0); /* This is critical! Apparently doesn't work if we don't do soft reset */
      faResetTriggerCount(FA_SLOT);
      faResetToken(FA_SLOT);
      faStatus(FA_SLOT,0);
    }
#endif /* End: ENABLE_FADC */


#ifdef IS_VXS
  sdStatus();
#endif

  /* TI Status */
  tiStatus(0);

#ifdef ENABLE_F1
  /* Setup the F1TDC */
  f1ConfigReadFile("/home/adaq/git/f1tdc/rol/hcal_f1tdc.cfg");
  
  iflag = 0;
  iflag |= F1_SD_ADDR; /* with SD address */
  iflag |= 4;  /* read from file */
  printf("iflag = 0x%x\n",iflag);

  f1Init(F1_ADDR,1<<19,NF1TDC,iflag);
  islot = 0;
  printf("\n\n\n - - - - AFTER f1Init - - - - - \\n\n\n");
  for(islot = 0; islot < NF1TDC; islot++) {
    printf("Found slot in %d\n",f1ID[islot]);

    /* Should we reset here? */
    /*  f1Reset(f1ID[islot],0); */
  }
  /*  f1Init(F1_ADDR,1<<19,NF1TDC,iflag); */
  F1_SLOT = f1ID[0];
  printf("\n\n\n\n\n");
  

  /* For multiple boards we enable multiblock, which also enables
     the bus error on the last board. When not in multiblock we can
     enable multiblock on the single board ourselves.
  */
#ifndef DISABLE_MULTIBLOCK_READOUT
  if(NF1TDC>1) {
    f1EnableMultiBlock();
  } else {
    /*  f1EnableBusError(F1_SLOT); */
    f1GEnableBusError();
  }
#else /* Multiblock disabled? Enable the bus error on each F1TDC */
  f1GEnableBusError(3,3,4,5);
  /* This is a test: */
#endif /* End: !DISABLE_MULTIBLOCK_READOUT */
  f1GStatus(F1_SLOT);

  F1_SLOT = f1ID[0];
  f1GEnableData(F1_ALL_CHIPS); /* Enable data on all chips */
  printf("\n\n\n * * * * BEFORE Sending ReSync (to lock resolution) \n\n\n");
  f1GStatus(F1_SLOT);

#endif /* End: ENABLE_F1 */


#ifdef ENABLE_HCAL_PULSER
   /*
  HCAL_LED_LIST[0] = 1<<(6-1); 
  HCAL_LED_LIST[1] = 1<<(5-1);
  HCAL_LED_LIST[2] = 1<<(4-1); 
  HCAL_LED_LIST[3] = 1<<(3-1); 
  HCAL_LED_LIST[4] = 1<<(2-1);
  HCAL_LED_LIST[5] = 1<<(1-1);
  HCAL_LED_LIST[6] = 0;
  HCAL_LED_MAX_COUNT[0] = 1000;
  HCAL_LED_MAX_COUNT[1] = 1000;
  HCAL_LED_MAX_COUNT[2] = 1000;
  HCAL_LED_MAX_COUNT[3] = 1000;
  HCAL_LED_MAX_COUNT[4] = 1000;
  HCAL_LED_MAX_COUNT[5] = 1000;
  HCAL_LED_MAX_COUNT[6] = 1000;
   */

  HCAL_LED_LIST[0] = 1<<(5-1); 
  HCAL_LED_LIST[1] = 1<<(4-1);
  HCAL_LED_LIST[2] = 1<<(3-1); 
  HCAL_LED_LIST[3] = 1<<(2-1); 
  HCAL_LED_LIST[4] = 1<<(1-1);
  HCAL_LED_LIST[5] = 0;
  HCAL_LED_MAX_COUNT[0] = 1000;
  HCAL_LED_MAX_COUNT[1] = 1000;
  HCAL_LED_MAX_COUNT[2] = 1000;
  HCAL_LED_MAX_COUNT[3] = 1000;
  HCAL_LED_MAX_COUNT[4] = 1000;
  HCAL_LED_MAX_COUNT[5] = 1000;

   /*
  HCAL_LED_LIST[0] = 1<<(4-1); 
  HCAL_LED_LIST[1] = 1<<(3-1);
  HCAL_LED_LIST[2] = 1<<(2-1); 
  HCAL_LED_LIST[3] = 1<<(1-1); 
  HCAL_LED_LIST[4] = 0; // always want to have a pedestal measurement
  HCAL_LED_MAX_COUNT[0] = 1000;
  HCAL_LED_MAX_COUNT[1] = 1000;
  HCAL_LED_MAX_COUNT[2] = 1000;
  HCAL_LED_MAX_COUNT[3] = 1000;
  HCAL_LED_MAX_COUNT[4] = 1000;
   */

  HCAL_LED_LIST_ITER=0;
  HCAL_LED_COUNT=0;
  printf("HCAL LED LIST: %d %d %d %d\n",HCAL_LED_LIST[0],
    HCAL_LED_LIST[1], HCAL_LED_LIST[2], HCAL_LED_LIST[3]);

  /* Clock in the first setting */
  hcalClkIn(HCAL_LED_LIST[HCAL_LED_LIST_ITER]);
#endif

  /* SYNC is issued after this routine is executed */

#ifndef IS_VXS
  /*  usleep(50000); */
  /* Send resyn pulse to TDC and/or FADC SDs */
  /* This should lock the resolution on the F1s and FADCs */
  tiSetOutputPort(0,0,0,0);
  /* usleep(50000); */
  tiSetOutputPort(0,1,0,0);
  /* usleep(50000); */
  tiSetOutputPort(0,0,0,0);
  /* Wait for the resolution to lock */
  usleep(50000);
  usleep(50000);
#endif

#ifdef ENABLE_F1
  printf("\n\n\n * * * * AFTER  Sending ReSync (to lock resolution) \n\n\n");
  f1GStatus(F1_SLOT);
#endif

  printf("rocPrestart: User Prestart Executed\n");
}

/****************************************
 *  GO
 ****************************************/
void
rocGo()
{
  /* Enable modules, if needed, here */
  int iwait=0;
  int islot, allchanup=0;

  /* Get the current block level */
  BLOCKLEVEL = tiGetCurrentBlockLevel();
  printf("%s: Current Block Level = %d\n",
	 __FUNCTION__,BLOCKLEVEL);


  //ctpGetErrorLatchFS(1);

#ifdef ENABLE_FADC
  faGSetBlockLevel(BLOCKLEVEL);
  faGEnable(0,0);  /* Enable data acquisition and sdc */
#endif /* End: ENABLE_FADC */

  /* Enable modules, if needed, here */

  tiSetOutputPort(0,0,0,0);
  /* Interrupts/Polling enabled after conclusion of rocGo() */
}

/****************************************
 *  END
 ****************************************/
void
rocEnd()
{
  int islot;


#ifdef ENABLE_FADC
  /* FADC Disable */
  faGDisable(0);
  faGStatus(0);
#endif /* End: ENABLE_FADC */

#ifdef ENABLE_F1
  /* F1TDC Event status - Is all data read out */
  f1GStatus(0);
  islot = 0;
  for(islot = 0; islot<NF1TDC; islot++) {
    F1_SLOT=f1ID[islot];
    f1Reset(F1_SLOT,0);
  }
#endif /* End: ENABLE_F1 */


  tiStatus(0);
#ifdef IS_VXS
  sdStatus();
#endif
#ifdef ENABLE_HCAL_PULSER
    hcalClkIn(16); /* Turn on LED 5 at the end */
#endif
  /* Turn off all output ports */
  tiSetOutputPort(0,0,0,0);

  printf("rocEnd: Ended after %d blocks\n",tiGetIntCount());
  
}

/****************************************
 *  READOUT TRIGGER
 ****************************************/
void
rocTrigger(int arg)
{
  int islot,ii,nslots;
  int dCnt, len=0, idata;
  int stat, itime, gbready;
  int roflag=1;
  int syncFlag=0;
  int datascan=0;
  int nwords;
  static unsigned int roEventNumber=0;


  roEventNumber++;
  syncFlag = tiGetSyncEventFlag();

  if(tiGetSyncEventReceived())
    {
      printf("%s: Sync Event received at readout event %d\n",
	     __FUNCTION__,roEventNumber);
    }

  if(syncFlag)
    {
      printf("%s: Sync Flag Received at readout event %d\n",
	     __FUNCTION__,roEventNumber);
/*       printf("  Sleeping for 10 seconds... \n"); */
/*       sleep(10); */
/*       printf("  ... Done\n"); */
    }

  /* Set high, the first output port */
  tiSetOutputPort(1,0,0,0);

#ifdef READOUT_TEST
  BANKOPEN(BANK_TEST,BT_UI4,0);
  *dma_dabufp++ = LSWAP(tiGetIntCount());
  *dma_dabufp++ = LSWAP(0xdead);
  *dma_dabufp++ = LSWAP(0xcebaf111);
  BANKCLOSE;
#endif


#ifdef READOUT_TI_DATA
#ifndef DISABLE_MULTIBLOCK_READOUT
  BANKOPEN(BANK_TI,BT_UI4,0);

  vmeDmaConfig(2,5,1); 
  dCnt = tiReadBlock(dma_dabufp,8+(3*BLOCKLEVEL),1);
  if(dCnt<=0)
    {
      printf("No data or error.  dCnt = %d\n",dCnt);
    }
  else
    {
      dma_dabufp += dCnt;
    }

  BANKCLOSE;
#endif /* End: !DISABLE_MULTIBLOCK_READOUT */
#endif /* End: READOUT_TI_DATA */


#ifdef ENABLE_FADC
#ifdef READOUT_FADC
  /* Readout FADC */
  if(NFADC!=0)
  {
    printf("Event: %d, Reading out FADC\n",tiGetIntCount());
    FA_SLOT = fadcID[0];
    for(itime=0;itime<100;itime++) 
    {
      gbready = faGBready();
      stat = (gbready == fadcSlotMask);
      if (stat>0) 
      {
        break;
      }
    }
    if(stat>0) 
    {
      vmeDmaConfig(2,5,1);
      BANKOPEN(BANK_FADC,BT_UI4,0);
#ifndef DISABLE_MULTIBLOCK_READOUT
      if(NFADC>1) roflag=2; /* Use token passing scheme to readout all modules */
      nslots = 1;
#else
      roflag = 1;
      nslots = NFADC;
#endif
      islot = 0;
      for(islot = 0; islot<nslots; islot++)
      {
        FA_SLOT=fadcID[islot];
        dCnt = faReadBlock(FA_SLOT,dma_dabufp,MAXFADCWORDS,roflag);
        if(dCnt<=0)
        {
          printf("FADC%d: No data or error.  dCnt = %d\n",FA_SLOT,dCnt);
        }
        else
        {
          if(dCnt>=MAXFADCWORDS)
          {
            printf("%s: WARNING.. faReadBlock returned dCnt >= MAXFADCWORDS (%d >= %d)\n",
                __FUNCTION__,dCnt, MAXFADCWORDS);
          }
          else 
            dma_dabufp += dCnt;
        }
      }
      BANKCLOSE;
      vmeDmaConfig(2,3,0);
    } 
    else 
    {
      printf ("FADC%d: no events   stat=%d  intcount = %d   gbready = 0x%08x  fadcSlotMask = 0x%08x\n",
          FA_SLOT,stat,tiGetIntCount(),gbready,fadcSlotMask);
    }

    /* Reset the Token */
    if(roflag==2)
    {
      for(islot=0; islot<NFADC; islot++)
      {
        FA_SLOT = fadcID[islot];
        faResetToken(FA_SLOT);
      }
    }
  }
#endif /* End: READOUT_FADC */
#endif /* End: ENABLE_FADC */

#ifdef ENABLE_F1
#ifdef READOUT_F1
  if(NF1TDC <= 1) {
    roflag = 1; /* DMA Transfer */
  } else {
    roflag = 2; /* Multiple DMA Transfer */
  }
  roflag=1; /* Test, Alex says not to use MultiBlock */
#ifdef DISABLE_MULTIBLOCK_READOUT
  /* vmeDmaConfig(2,3,0);*/
#endif
  BANKOPEN(BANK_F1,BT_UI4,0);
  
  /* Insert the trigger count here */
  *dma_dabufp++ = LSWAP(tiGetIntCount());
  /* Check for valid data here */
  F1_SLOT = f1ID[0];
  for(ii=0;ii<100;ii++) 
    {
      datascan = f1Dready(F1_SLOT);
      if (datascan>0) 
	{
	  break;
	}
    }
  
  if(datascan>0) 
    {
      for(islot = 0; islot < NF1TDC; islot++) {
       F1_SLOT = f1ID[islot];
       /* This one was just a test, but it breaks the decoder, so only uncomment it for special tests */
       /*  *dma_dabufp++ = LSWAP(0xda000000|(F1_SLOT<<12)|0xadc); */
       nwords = f1ReadEvent(F1_SLOT,dma_dabufp,100*NF1TDC*64,roflag);
      /* TEST, print out only */
      /* nwords = 0;
      f1GPrintEvent(0);
      */


      if(nwords < 0) 
	{
	  printf("ERROR: in transfer (event = %d), status = 0x%x\n", tiGetIntCount(),nwords);
	  *dma_dabufp++ = LSWAP(0xda000bad);
	} 
      else 
	{
          /*  printf("Evt %10d: TDC in slot=%d read nwords=%d\n",tiGetIntCount(),F1_SLOT,nwords); */
	  dma_dabufp += nwords;
	}
      }
    }
  else 
    {
      printf("ERROR: Data not ready in event %d, F1TDC slot %d\n",tiGetIntCount(),F1_SLOT);
      *dma_dabufp++ = LSWAP(0xda000bad);
    }
  *dma_dabufp++ = LSWAP(0xda0000ff); /* Event EOB */
  BANKCLOSE;

#ifdef DISABLE_MULTIBLOCK_READOUT
  //vmeDmaConfig(2,5,1); 
#endif

#endif // READOUT_F1
#endif // ENABLE_F1

#ifdef ENABLE_HCAL_PULSER
  HCAL_LED_COUNT++;
  BANKOPEN(BANK_HCAL_PULSER,BT_UI4,0);
  /**dma_dabufp++ = LSWAP(tiGetIntCount());*/
  *dma_dabufp++ = LSWAP(HCAL_LED_LIST_ITER);
  *dma_dabufp++ = LSWAP(HCAL_LED_LIST[HCAL_LED_LIST_ITER]);
  *dma_dabufp++ = LSWAP(HCAL_LED_COUNT);
  *dma_dabufp++ = LSWAP((HCAL_LED_LIST_ITER<<22)|(HCAL_LED_LIST[HCAL_LED_LIST_ITER]<<16)|HCAL_LED_COUNT);
  BANKCLOSE;
  /* Run the HCAL pulser clock in code */
  if(HCAL_LED_COUNT>=HCAL_LED_MAX_COUNT[HCAL_LED_LIST_ITER]) {
    HCAL_LED_COUNT=0;
    HCAL_LED_LIST_ITER++;
    if(HCAL_LED_LIST_ITER>=HCAL_LED_NLIST) {
      HCAL_LED_LIST_ITER=0;
    }
    printf("Clocking in HCAL LED: %2d, %2d (tircount:%d)\n",HCAL_LED_LIST_ITER,HCAL_LED_LIST[HCAL_LED_LIST_ITER],tiGetIntCount());
    hcalClkIn(HCAL_LED_LIST[HCAL_LED_LIST_ITER]);
  }
#endif

  /* Turn off all output ports */
  tiSetOutputPort(0,0,0,0);
}

/*
 * rocCleanup
 *  - Routine called just before the library is unloaded.
 */

void
rocCleanup()
{
  int islot=0;

  /*
   * Perform a RESET on all FADC250s.
   *   - Turn off all A32 (block transfer) addresses
   */
/*   printf("%s: Reset all FADCs\n",__FUNCTION__); */
  
#ifdef ENABLE_FADC
  for(islot=0; islot<NFADC; islot++)
    {
      FA_SLOT = fadcID[islot];
      faReset(FA_SLOT,1); /* Reset, and DO NOT restore A32 settings (1) */
    }
#endif /* ENABLE_FADC */

  remexClose();

}
